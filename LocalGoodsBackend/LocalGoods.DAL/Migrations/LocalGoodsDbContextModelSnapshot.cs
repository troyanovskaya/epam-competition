// <auto-generated />
using System;
using LocalGoods.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LocalGoods.DAL.Migrations
{
    [DbContext(typeof(LocalGoodsDbContext))]
    partial class LocalGoodsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41f9836e-c0cb-43a6-a842-22e6f5a60f1d"),
                            Name = "Farm boxes"
                        },
                        new
                        {
                            Id = new Guid("7cd2e12d-c85d-4d97-9c18-808dff6151f4"),
                            Name = "Produce"
                        },
                        new
                        {
                            Id = new Guid("4374b672-d0b1-4f31-b512-408400ce6105"),
                            Name = "Meat & Seafood"
                        },
                        new
                        {
                            Id = new Guid("c11d3cf5-6847-4281-9950-52b03f3811fa"),
                            Name = "Dairy & Eggs"
                        },
                        new
                        {
                            Id = new Guid("40ff4e36-58e3-408a-b563-aa51c7db51a2"),
                            Name = "Bakery"
                        },
                        new
                        {
                            Id = new Guid("2766062f-f160-49aa-bd48-c62ac0b2b0da"),
                            Name = "Pantry"
                        },
                        new
                        {
                            Id = new Guid("e9a69e36-98e3-4da2-9c76-f723c4b59178"),
                            Name = "Drinks"
                        },
                        new
                        {
                            Id = new Guid("9072ca4f-1c4b-4abe-9535-876e4d50e005"),
                            Name = "Easy meals"
                        },
                        new
                        {
                            Id = new Guid("24735f5d-906d-4c41-9f86-89d19d6620c6"),
                            Name = "New & Seasonal"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("43809371-4e7d-4616-ac26-d62d202d4767"),
                            CountryId = new Guid("6123c937-478b-43a3-98f7-4c6b6fa2fa83"),
                            Name = "Kharkiv"
                        },
                        new
                        {
                            Id = new Guid("e82aafbd-713b-4e12-a4a1-b38378a5a90f"),
                            CountryId = new Guid("6123c937-478b-43a3-98f7-4c6b6fa2fa83"),
                            Name = "Dnipro"
                        },
                        new
                        {
                            Id = new Guid("f647d6cc-359d-4d42-aca7-3a6f5a691eae"),
                            CountryId = new Guid("6123c937-478b-43a3-98f7-4c6b6fa2fa83"),
                            Name = "Kyiv"
                        },
                        new
                        {
                            Id = new Guid("7ce5b758-acdc-4bbd-a745-2fbd5a64b598"),
                            CountryId = new Guid("6123c937-478b-43a3-98f7-4c6b6fa2fa83"),
                            Name = "Lviv"
                        },
                        new
                        {
                            Id = new Guid("a146ee56-265a-4fd7-9732-5393637220bf"),
                            CountryId = new Guid("b83484f9-092d-4b51-afcb-5dc2450e2593"),
                            Name = "Yerevan"
                        },
                        new
                        {
                            Id = new Guid("3eff06d7-6e86-4dad-bbb7-b43f3321f83e"),
                            CountryId = new Guid("b83484f9-092d-4b51-afcb-5dc2450e2593"),
                            Name = "Gyumri"
                        },
                        new
                        {
                            Id = new Guid("d0dba58e-9a7f-427b-ad6e-3dba4e2a8af5"),
                            CountryId = new Guid("575f0725-41bc-49b7-9137-37070087ff4d"),
                            Name = "London"
                        },
                        new
                        {
                            Id = new Guid("07d7e41c-b329-4dc0-a9d1-7e0e84b73bba"),
                            CountryId = new Guid("575f0725-41bc-49b7-9137-37070087ff4d"),
                            Name = "Liverpool"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6123c937-478b-43a3-98f7-4c6b6fa2fa83"),
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("b83484f9-092d-4b51-afcb-5dc2450e2593"),
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = new Guid("575f0725-41bc-49b7-9137-37070087ff4d"),
                            Name = "England"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.DeliveryMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79af055a-7827-4e6e-943d-094f81c75fe2"),
                            Name = "Delivery"
                        },
                        new
                        {
                            Id = new Guid("152d8dc9-6f20-44d4-82fd-c5e9f4ef299b"),
                            Name = "Takeaway"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryInformation")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("DeliveryMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("5cd43639-e879-4331-9e3b-019537bb729b"));

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.OrderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5cd43639-e879-4331-9e3b-019537bb729b"),
                            Name = "New"
                        },
                        new
                        {
                            Id = new Guid("6f0a355f-c0b1-46a3-a93a-94fad9aa1ed3"),
                            Name = "Pending"
                        },
                        new
                        {
                            Id = new Guid("de780f77-888f-44e8-be34-d796f5342b55"),
                            Name = "Paid"
                        },
                        new
                        {
                            Id = new Guid("17cf0057-aa23-4cdf-96a4-6573c7ae96e6"),
                            Name = "Completed"
                        },
                        new
                        {
                            Id = new Guid("712572b2-5991-48eb-a882-5b842dcfc5bf"),
                            Name = "Canceled"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("76cdcb56-30e6-4674-9085-d65a936cae25"),
                            Name = "Card"
                        },
                        new
                        {
                            Id = new Guid("60d556a7-26d6-4c02-a824-4b6cbdcb110e"),
                            Name = "Cash"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid>("UnitTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitTypeId");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4096c786-5577-4bb2-80c9-9c105b90e16f"),
                            ConcurrencyStamp = "d9f4bb7d-7411-4706-995f-560c7e5b1972",
                            Name = "Buyer",
                            NormalizedName = "BUYER"
                        },
                        new
                        {
                            Id = new Guid("77f9bef5-e093-4c53-9bbe-99afb43d2229"),
                            ConcurrencyStamp = "9409fbda-8820-43e1-9bb0-f6c0b2ded749",
                            Name = "Vendor",
                            NormalizedName = "VENDOR"
                        },
                        new
                        {
                            Id = new Guid("71be2e68-fa38-4de3-b253-d34f1c16cc9a"),
                            ConcurrencyStamp = "baf17a47-bf30-42e1-a31e-fac07868dc02",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.UnitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UnitTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d86d983b-61ed-4e7e-9c14-faa6fde675aa"),
                            Name = "Item"
                        },
                        new
                        {
                            Id = new Guid("c176f933-0587-4393-bc94-f5062c5f5bc2"),
                            Name = "Kg"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressInformation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3470262f-7571-ed11-b214-d41b81b14cb3"),
                            AccessFailedCount = 0,
                            AddressInformation = "Some address",
                            CityId = new Guid("43809371-4e7d-4616-ac26-d62d202d4767"),
                            ConcurrencyStamp = "8288ed6b-3972-47c1-a4bc-fa4fa26e02f5",
                            Email = "smith@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "SMITH@GMAIL.COM",
                            NormalizedUserName = "JOHNSMITH",
                            PasswordHash = "AQAAAAEAACcQAAAAEDkYL3RUU/7ScDdxXvD9hB8eYViSrUANyvEFA9M3SPX4HVqrKWaSf8GpATYde6Wibw==",
                            PhoneNumber = "+38012345678",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7JBROKPX4RLYJCPXDGP2COQ25X2DFUN5",
                            TwoFactorEnabled = false,
                            UserName = "JohnSmith"
                        },
                        new
                        {
                            Id = new Guid("4483ab90-887a-ed11-b7a9-0003aa002c50"),
                            AccessFailedCount = 0,
                            AddressInformation = "Some address",
                            CityId = new Guid("e82aafbd-713b-4e12-a4a1-b38378a5a90f"),
                            ConcurrencyStamp = "361787c1-69c1-4a6b-8f6b-3ee2721a8c3e",
                            Email = "admin@local.goods",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCAL.GOODS",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2R6txwf1WpL6eBtlvvmcS54/Q6STqQUaZlipMREY35Xn2zXt5vxoFtta6ZbpCu9Q==",
                            PhoneNumber = "380987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "U5IMACP6NPF4UHCNSEPQY2XRC6QIUL6K",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("InstagramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("TelegramName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ViberNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.VendorDeliveryMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeliveryMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryMethodId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorDeliveryMethods");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.VendorPaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("VendorId");

                    b.ToTable("VendorPaymentMethods");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3470262f-7571-ed11-b214-d41b81b14cb3"),
                            RoleId = new Guid("4096c786-5577-4bb2-80c9-9c105b90e16f")
                        },
                        new
                        {
                            UserId = new Guid("4483ab90-887a-ed11-b7a9-0003aa002c50"),
                            RoleId = new Guid("71be2e68-fa38-4de3-b253-d34f1c16cc9a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.City", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Image", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Order", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryMethod");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.OrderDetails", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.UnitType", "UnitType")
                        .WithMany("OrderDetails")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Product", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.UnitType", "UnitType")
                        .WithMany("Products")
                        .HasForeignKey("UnitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitType");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.User", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Vendor", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.VendorDeliveryMethod", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.DeliveryMethod", "DeliveryMethod")
                        .WithMany("VendorDeliveryMethods")
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.Vendor", "Vendor")
                        .WithMany("VendorDeliveryMethods")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeliveryMethod");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.VendorPaymentMethod", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("VendorPaymentMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.Vendor", "Vendor")
                        .WithMany("VendorPaymentMethods")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalGoods.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LocalGoods.DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.DeliveryMethod", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("VendorDeliveryMethods");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("VendorPaymentMethods");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.UnitType", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.User", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LocalGoods.DAL.Entities.Vendor", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("VendorDeliveryMethods");

                    b.Navigation("VendorPaymentMethods");
                });
#pragma warning restore 612, 618
        }
    }
}
